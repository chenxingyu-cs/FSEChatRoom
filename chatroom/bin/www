#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatroom:server');
var http = require('http');
var moment = require('moment');
currentChatters = new Map();


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function(socket){ 

  
  socket.on('user logged in', function(data){
    // currentChatters.set(row.userId, {userName: row.userName, userColor: row.userColor});
    currentChatters.set(data.userId, {userName: data.userName, userColor: data.userColor});
    var cnt = 0;
    currentChatters.forEach(function(value, key) {
      io.emit('update chatters', {
      userName: value.userName,
      userColor: value.userColor,
      cnt: cnt
    });
    cnt = cnt + 1;
    }, currentChatters);
  });

  socket.on('user logged out', function(data){
    currentChatters.delete(data.userId)
    var cnt = 0;
    currentChatters.forEach(function(value, key) {
      io.emit('update chatters', {
      userName: value.userName,
      userColor: value.userColor,
      cnt: cnt
    });
    cnt = cnt + 1;
    }, currentChatters);
  });

  socket.on('get all msg', function(data){
    var fs = require("fs");
      var file = "chat.db";
      var exists = fs.existsSync(file);
      if(!exists) {
        console.log("Creating DB file.");
        fs.openSync(file, "w");
      }

      //Create the chat-history Table
      var sqlite3 = require("sqlite3").verbose();
      var db = new sqlite3.Database(file);

      db.each("SELECT rowid AS id, userName, msgContent, msgTime, userColor FROM ChatHistory", function(err, row) {
          io.emit('refresh message', {
            sentUserName: data.sentUserName,
            userName: row.userName,
            msgContent: row.msgContent,
            msgTime: row.msgTime,
            msgColor: row.userColor
          });
      });
  });


  socket.on('chat message', function(data){
    console.log("www received");

    var fs = require("fs");
    var file = "chat.db";
    var exists = fs.existsSync(file);
    if(!exists) {
      console.log("Creating DB file.");
      fs.openSync(file, "w");
    }
    //Create the chat-history Table
    var sqlite3 = require("sqlite3").verbose();
    var db = new sqlite3.Database(file);

    var stmt = db.prepare("INSERT INTO ChatHistory (userName, msgContent, userColor) VALUES (?, ?, ?)");
    stmt.run(data.userName, data.msgContent, data.userColor);
    stmt.finalize();
    db.close();    
    io.emit('chat message', {
      userName: data.userName,
      msgContent: data.msgContent,
      msgTime: moment().format('YYYY-MM-DD HH:mm:ss'),
      msgColor: data.userColor 
    });  
      
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
